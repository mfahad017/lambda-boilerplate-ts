import { HttpHandlerOptions as __HttpHandlerOptions } from "@smithy/types";
import {
  CreateBatchLoadTaskCommandInput,
  CreateBatchLoadTaskCommandOutput,
} from "./commands/CreateBatchLoadTaskCommand";
import {
  CreateDatabaseCommandInput,
  CreateDatabaseCommandOutput,
} from "./commands/CreateDatabaseCommand";
import {
  CreateTableCommandInput,
  CreateTableCommandOutput,
} from "./commands/CreateTableCommand";
import {
  DeleteDatabaseCommandInput,
  DeleteDatabaseCommandOutput,
} from "./commands/DeleteDatabaseCommand";
import {
  DeleteTableCommandInput,
  DeleteTableCommandOutput,
} from "./commands/DeleteTableCommand";
import {
  DescribeBatchLoadTaskCommandInput,
  DescribeBatchLoadTaskCommandOutput,
} from "./commands/DescribeBatchLoadTaskCommand";
import {
  DescribeDatabaseCommandInput,
  DescribeDatabaseCommandOutput,
} from "./commands/DescribeDatabaseCommand";
import {
  DescribeEndpointsCommandInput,
  DescribeEndpointsCommandOutput,
} from "./commands/DescribeEndpointsCommand";
import {
  DescribeTableCommandInput,
  DescribeTableCommandOutput,
} from "./commands/DescribeTableCommand";
import {
  ListBatchLoadTasksCommandInput,
  ListBatchLoadTasksCommandOutput,
} from "./commands/ListBatchLoadTasksCommand";
import {
  ListDatabasesCommandInput,
  ListDatabasesCommandOutput,
} from "./commands/ListDatabasesCommand";
import {
  ListTablesCommandInput,
  ListTablesCommandOutput,
} from "./commands/ListTablesCommand";
import {
  ListTagsForResourceCommandInput,
  ListTagsForResourceCommandOutput,
} from "./commands/ListTagsForResourceCommand";
import {
  ResumeBatchLoadTaskCommandInput,
  ResumeBatchLoadTaskCommandOutput,
} from "./commands/ResumeBatchLoadTaskCommand";
import {
  TagResourceCommandInput,
  TagResourceCommandOutput,
} from "./commands/TagResourceCommand";
import {
  UntagResourceCommandInput,
  UntagResourceCommandOutput,
} from "./commands/UntagResourceCommand";
import {
  UpdateDatabaseCommandInput,
  UpdateDatabaseCommandOutput,
} from "./commands/UpdateDatabaseCommand";
import {
  UpdateTableCommandInput,
  UpdateTableCommandOutput,
} from "./commands/UpdateTableCommand";
import {
  WriteRecordsCommandInput,
  WriteRecordsCommandOutput,
} from "./commands/WriteRecordsCommand";
import { TimestreamWriteClient } from "./TimestreamWriteClient";
export interface TimestreamWrite {
  createBatchLoadTask(
    args: CreateBatchLoadTaskCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateBatchLoadTaskCommandOutput>;
  createBatchLoadTask(
    args: CreateBatchLoadTaskCommandInput,
    cb: (err: any, data?: CreateBatchLoadTaskCommandOutput) => void
  ): void;
  createBatchLoadTask(
    args: CreateBatchLoadTaskCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateBatchLoadTaskCommandOutput) => void
  ): void;
  createDatabase(
    args: CreateDatabaseCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateDatabaseCommandOutput>;
  createDatabase(
    args: CreateDatabaseCommandInput,
    cb: (err: any, data?: CreateDatabaseCommandOutput) => void
  ): void;
  createDatabase(
    args: CreateDatabaseCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateDatabaseCommandOutput) => void
  ): void;
  createTable(
    args: CreateTableCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<CreateTableCommandOutput>;
  createTable(
    args: CreateTableCommandInput,
    cb: (err: any, data?: CreateTableCommandOutput) => void
  ): void;
  createTable(
    args: CreateTableCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: CreateTableCommandOutput) => void
  ): void;
  deleteDatabase(
    args: DeleteDatabaseCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteDatabaseCommandOutput>;
  deleteDatabase(
    args: DeleteDatabaseCommandInput,
    cb: (err: any, data?: DeleteDatabaseCommandOutput) => void
  ): void;
  deleteDatabase(
    args: DeleteDatabaseCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteDatabaseCommandOutput) => void
  ): void;
  deleteTable(
    args: DeleteTableCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DeleteTableCommandOutput>;
  deleteTable(
    args: DeleteTableCommandInput,
    cb: (err: any, data?: DeleteTableCommandOutput) => void
  ): void;
  deleteTable(
    args: DeleteTableCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DeleteTableCommandOutput) => void
  ): void;
  describeBatchLoadTask(
    args: DescribeBatchLoadTaskCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeBatchLoadTaskCommandOutput>;
  describeBatchLoadTask(
    args: DescribeBatchLoadTaskCommandInput,
    cb: (err: any, data?: DescribeBatchLoadTaskCommandOutput) => void
  ): void;
  describeBatchLoadTask(
    args: DescribeBatchLoadTaskCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeBatchLoadTaskCommandOutput) => void
  ): void;
  describeDatabase(
    args: DescribeDatabaseCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeDatabaseCommandOutput>;
  describeDatabase(
    args: DescribeDatabaseCommandInput,
    cb: (err: any, data?: DescribeDatabaseCommandOutput) => void
  ): void;
  describeDatabase(
    args: DescribeDatabaseCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeDatabaseCommandOutput) => void
  ): void;
  describeEndpoints(
    args: DescribeEndpointsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeEndpointsCommandOutput>;
  describeEndpoints(
    args: DescribeEndpointsCommandInput,
    cb: (err: any, data?: DescribeEndpointsCommandOutput) => void
  ): void;
  describeEndpoints(
    args: DescribeEndpointsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeEndpointsCommandOutput) => void
  ): void;
  describeTable(
    args: DescribeTableCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<DescribeTableCommandOutput>;
  describeTable(
    args: DescribeTableCommandInput,
    cb: (err: any, data?: DescribeTableCommandOutput) => void
  ): void;
  describeTable(
    args: DescribeTableCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: DescribeTableCommandOutput) => void
  ): void;
  listBatchLoadTasks(
    args: ListBatchLoadTasksCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListBatchLoadTasksCommandOutput>;
  listBatchLoadTasks(
    args: ListBatchLoadTasksCommandInput,
    cb: (err: any, data?: ListBatchLoadTasksCommandOutput) => void
  ): void;
  listBatchLoadTasks(
    args: ListBatchLoadTasksCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListBatchLoadTasksCommandOutput) => void
  ): void;
  listDatabases(
    args: ListDatabasesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListDatabasesCommandOutput>;
  listDatabases(
    args: ListDatabasesCommandInput,
    cb: (err: any, data?: ListDatabasesCommandOutput) => void
  ): void;
  listDatabases(
    args: ListDatabasesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListDatabasesCommandOutput) => void
  ): void;
  listTables(
    args: ListTablesCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTablesCommandOutput>;
  listTables(
    args: ListTablesCommandInput,
    cb: (err: any, data?: ListTablesCommandOutput) => void
  ): void;
  listTables(
    args: ListTablesCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTablesCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ListTagsForResourceCommandOutput>;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  listTagsForResource(
    args: ListTagsForResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ListTagsForResourceCommandOutput) => void
  ): void;
  resumeBatchLoadTask(
    args: ResumeBatchLoadTaskCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<ResumeBatchLoadTaskCommandOutput>;
  resumeBatchLoadTask(
    args: ResumeBatchLoadTaskCommandInput,
    cb: (err: any, data?: ResumeBatchLoadTaskCommandOutput) => void
  ): void;
  resumeBatchLoadTask(
    args: ResumeBatchLoadTaskCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: ResumeBatchLoadTaskCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<TagResourceCommandOutput>;
  tagResource(
    args: TagResourceCommandInput,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  tagResource(
    args: TagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: TagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UntagResourceCommandOutput>;
  untagResource(
    args: UntagResourceCommandInput,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  untagResource(
    args: UntagResourceCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UntagResourceCommandOutput) => void
  ): void;
  updateDatabase(
    args: UpdateDatabaseCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateDatabaseCommandOutput>;
  updateDatabase(
    args: UpdateDatabaseCommandInput,
    cb: (err: any, data?: UpdateDatabaseCommandOutput) => void
  ): void;
  updateDatabase(
    args: UpdateDatabaseCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateDatabaseCommandOutput) => void
  ): void;
  updateTable(
    args: UpdateTableCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<UpdateTableCommandOutput>;
  updateTable(
    args: UpdateTableCommandInput,
    cb: (err: any, data?: UpdateTableCommandOutput) => void
  ): void;
  updateTable(
    args: UpdateTableCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: UpdateTableCommandOutput) => void
  ): void;
  writeRecords(
    args: WriteRecordsCommandInput,
    options?: __HttpHandlerOptions
  ): Promise<WriteRecordsCommandOutput>;
  writeRecords(
    args: WriteRecordsCommandInput,
    cb: (err: any, data?: WriteRecordsCommandOutput) => void
  ): void;
  writeRecords(
    args: WriteRecordsCommandInput,
    options: __HttpHandlerOptions,
    cb: (err: any, data?: WriteRecordsCommandOutput) => void
  ): void;
}
export declare class TimestreamWrite
  extends TimestreamWriteClient
  implements TimestreamWrite {}
