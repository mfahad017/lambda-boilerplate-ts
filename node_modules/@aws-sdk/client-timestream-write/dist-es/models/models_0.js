import { SENSITIVE_STRING } from "@smithy/smithy-client";
import { TimestreamWriteServiceException as __BaseException } from "./TimestreamWriteServiceException";
export class AccessDeniedException extends __BaseException {
    constructor(opts) {
        super({
            name: "AccessDeniedException",
            $fault: "client",
            ...opts,
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.Message = opts.Message;
    }
}
export const BatchLoadDataFormat = {
    CSV: "CSV",
};
export const BatchLoadStatus = {
    CREATED: "CREATED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PENDING_RESUME: "PENDING_RESUME",
    PROGRESS_STOPPED: "PROGRESS_STOPPED",
    SUCCEEDED: "SUCCEEDED",
};
export const MeasureValueType = {
    BIGINT: "BIGINT",
    BOOLEAN: "BOOLEAN",
    DOUBLE: "DOUBLE",
    MULTI: "MULTI",
    TIMESTAMP: "TIMESTAMP",
    VARCHAR: "VARCHAR",
};
export const ScalarMeasureValueType = {
    BIGINT: "BIGINT",
    BOOLEAN: "BOOLEAN",
    DOUBLE: "DOUBLE",
    TIMESTAMP: "TIMESTAMP",
    VARCHAR: "VARCHAR",
};
export const TimeUnit = {
    MICROSECONDS: "MICROSECONDS",
    MILLISECONDS: "MILLISECONDS",
    NANOSECONDS: "NANOSECONDS",
    SECONDS: "SECONDS",
};
export const S3EncryptionOption = {
    SSE_KMS: "SSE_KMS",
    SSE_S3: "SSE_S3",
};
export class ConflictException extends __BaseException {
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        this.name = "ConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
export class InternalServerException extends __BaseException {
    constructor(opts) {
        super({
            name: "InternalServerException",
            $fault: "server",
            ...opts,
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.Message = opts.Message;
    }
}
export class InvalidEndpointException extends __BaseException {
    constructor(opts) {
        super({
            name: "InvalidEndpointException",
            $fault: "client",
            ...opts,
        });
        this.name = "InvalidEndpointException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEndpointException.prototype);
        this.Message = opts.Message;
    }
}
export class ResourceNotFoundException extends __BaseException {
    constructor(opts) {
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts,
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
        this.Message = opts.Message;
    }
}
export class ServiceQuotaExceededException extends __BaseException {
    constructor(opts) {
        super({
            name: "ServiceQuotaExceededException",
            $fault: "client",
            ...opts,
        });
        this.name = "ServiceQuotaExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ServiceQuotaExceededException.prototype);
        this.Message = opts.Message;
    }
}
export class ThrottlingException extends __BaseException {
    constructor(opts) {
        super({
            name: "ThrottlingException",
            $fault: "client",
            ...opts,
        });
        this.name = "ThrottlingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ThrottlingException.prototype);
        this.Message = opts.Message;
    }
}
export class ValidationException extends __BaseException {
    constructor(opts) {
        super({
            name: "ValidationException",
            $fault: "client",
            ...opts,
        });
        this.name = "ValidationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ValidationException.prototype);
        this.Message = opts.Message;
    }
}
export const PartitionKeyEnforcementLevel = {
    OPTIONAL: "OPTIONAL",
    REQUIRED: "REQUIRED",
};
export const PartitionKeyType = {
    DIMENSION: "DIMENSION",
    MEASURE: "MEASURE",
};
export const TableStatus = {
    ACTIVE: "ACTIVE",
    DELETING: "DELETING",
    RESTORING: "RESTORING",
};
export const DimensionValueType = {
    VARCHAR: "VARCHAR",
};
export class RejectedRecordsException extends __BaseException {
    constructor(opts) {
        super({
            name: "RejectedRecordsException",
            $fault: "client",
            ...opts,
        });
        this.name = "RejectedRecordsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RejectedRecordsException.prototype);
        this.Message = opts.Message;
        this.RejectedRecords = opts.RejectedRecords;
    }
}
export const CreateBatchLoadTaskRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientToken && { ClientToken: SENSITIVE_STRING }),
});
